install.packages("Gmisc")
install.packages("glue")
install.packages("glue")
library(glue)
library(htmlTable)
library(grid)
library(magrittr)
#| echo: false
library(Gmisc, quietly = TRUE)
grid.newpage()
one <- boxGrob("Total Economic Value")
install.packages("Gmisc")
library(Gmisc)
library(Gmisc)
one <- boxGrob("Total Economic Value")
two <- boxGrob("Use values")
three <- boxGrob("Passive-use values")
#| echo: false
library(DiagrammeR)
install.packages("DiagrammeR")
#| echo: false
library(DiagrammeR)
install.packages("DiagrammeR", dependencies = TRUE)
install.packages("DiagrammeR", dependencies = TRUE)
#| echo: false
library(DiagrammeR)
grViz("
digraph {
layout = dot
node [shape = rectangle,color=green,style=filled,fixedsize=True,width=0.6]
edge[color=grey,arrowhead=vee]
A[label = 'Total Economic Value']
B[label = 'Use values']
C[label = 'Passive use values']
D[label = 'Consumptive use']
E[label = 'Nonconsumptive use']
A->B
A->C
B->D
B->E
}")
?grViz
#| echo: false
library(DiagrammeR)
# Create the flowchart
grViz("
digraph flowchart {
graph [layout = dot, rankdir = TB]
node [shape = rectangle, style = filled, fillcolor = lightblue]
A [label = 'Start']
B [label = 'Step 1']
C [label = 'Step 2']
D [label = 'End']
# Connect nodes
A -> B -> C -> D
}
")
#| echo: false
library(DiagrammeR)
a_graph <-
create_graph() %>%
add_node() %>%
add_node() %>%
add_edge(from = 1, to = 2)
#| echo: false
library(DiagrammeR)
a_graph <-
create_graph() %>%
add_node() %>%
add_node() %>%
add_edge(from = 1, to = 2)
render_graph(a_graph)
#| echo: false
library(DiagrammeR)
a_graph <-
create_graph() %>%
add_node("A") %>%
add_node("B") %>%
add_edge(from = 1, to = 2)
render_graph(a_graph)
a_graph <-
create_graph() %>%
add_node("A") %>%
add_node("B") %>%
add_edge(from = "A", to = "B")
# With `create_graph()` we can
# simply create an empty graph (and
# add in nodes and edges later
# with other functions)
graph <- create_graph()
# A graph can be created with
# nodes and without having any edges;
# this can be done in 2 steps:
# 1. create a node data frame (ndf)
#    using `create_node_df()`
ndf <-
create_node_df(n = 4)
ndf
# 2. create a new graph object with
#    `create_graph()` and then pass
#    in the ndf to `nodes_df`
graph <-
create_graph(
nodes_df = ndf)
graph
# Get information on the graph's nodes
graph %>%
get_node_info()
# You can create a similar graph with
# just nodes but also providing a
# range of attributes for the nodes
# (e.g., types, labels, or arbitrary
# 'values')
ndf <-
create_node_df(
n = 4,
label = TRUE,
type = c("type_1", "type_1",
"type_5", "type_2"),
shape = c("circle", "circle",
"rectangle", "rectangle"),
values = c(3.5, 2.6, 9.4, 2.7))
render_graph(graph)
graph <-
create_graph(nodes_df = ndf)
render_graph(graph)
ndf
# You can create a similar graph with
# just nodes but also providing a
# range of attributes for the nodes
# (e.g., types, labels, or arbitrary
# 'values')
ndf <-
create_node_df(
n = 4,
label = FALSE,
type = c("type_1", "type_1",
"type_5", "type_2"),
shape = c("circle", "circle",
"rectangle", "rectangle"),
values = c(3.5, 2.6, 9.4, 2.7))
graph <-
create_graph(nodes_df = ndf)
render_graph(graph)
render_graph(graph)
# You can create a similar graph with
# just nodes but also providing a
# range of attributes for the nodes
# (e.g., types, labels, or arbitrary
# 'values')
ndf <-
create_node_df(
n = 4,
label = FALSE,
type = c("type_1", "type_1",
"type_5", "type_2"),
shape = c("circle", "circle",
"rectangle", "rectangle"),
values = c(3.5, 2.6, 9.4, 2.7))
graph <-
create_graph(nodes_df = ndf)
render_graph(graph)
ndf <-
create_node_df(
n = 2,
label = FALSE,
type = c("type_1", "type_1",
"type_5", "type_2"),
shape = c("circle", "circle",
"rectangle", "rectangle"),
values = c(3.5, 2.6, 9.4, 2.7))
graph <-
create_graph(nodes_df = ndf)
render_graph(graph)
knitr::include_graphics(images/f_1.jpg)
knitr::include_graphics("images/f_1.jpg")
